{"shell":true,"revision":"52ecd9657e963d1aee45d3ac921c16326ce78af6","objects":[{"type":null,"source":"lib/currency.ex:3","object_type":"ModuleObject","moduledoc":"\nDefines available currencies and functions to handle them\n\n","module":"Elixir.Monetized.Currency","id":"Monetized.Currency"},{"type":null,"source":"lib/math.ex:4","object_type":"ModuleObject","moduledoc":"\nThis modules defines mathematical operations using money.\n\nAll functions in this module take either money struct as\nparameters from which the currency is copied or it will\nconvert the given values into a money struct using\n`Monetized.Money.make/1` which in turn will use the default\ncurrency.\n\n","module":"Elixir.Monetized.Math","id":"Monetized.Math"},{"type":null,"source":"lib/money.ex:6","object_type":"ModuleObject","moduledoc":"\nDefines the money struct and functions to handle it.\n\nAlthough we're able to override any configuration when\ncalling functions that create/handle money, it is possible\nto change any of the default values seen below, through config.\n\n## Examples\n\n    config :monetized, config: [\n      delimiter: \",\",\n      separator: \".\",\n      currency: \"USD\",\n      format: \"%c %n%s%d\"\n    ]\n\n","module":"Elixir.Monetized.Money","id":"Monetized.Money"},{"type":"def","source":"lib/currency.ex:9","signature":[["key",[],null]],"object_type":"FunctionObject","name":"get_currency","module_id":"Monetized.Currency","id":"get_currency/1","doc":null,"arity":1},{"type":"def","source":"lib/math.ex:16","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"add","module_id":"Monetized.Math","id":"add/2","doc":"\nAdds money to money returning a money struct with\nthe result.\n\n## Examples\n\n    iex> payment_one = Monetized.Money.make(10, [currency: \"GBP\"])\n    ...> payment_two = Monetized.Money.make(20.50, [currency: \"GBP\"])\n    ...> result = Monetized.Math.add(payment_one, payment_two)\n    ...> Monetized.Money.to_string(result, [show_currency: true])\n    \"£ 30.50\"\n    \n    iex> result = Monetized.Math.add(100.50, 200)\n    ...> Monetized.Money.to_string(result, [show_currency: true])\n    \"$ 300.50\"\n    \n","arity":2},{"type":"def","source":"lib/math.ex:46","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"sub","module_id":"Monetized.Math","id":"sub/2","doc":"\nSubstracts money from money returning a money struct\nwith the result.\n\n## Examples\n\n    iex> payment_one = Monetized.Money.make(50)\n    ...> payment_two = Monetized.Money.make(51)\n    ...> Monetized.Math.sub(payment_one, payment_two)\n    %Monetized.Money{currency: \"USD\", units: -100}\n    \n    iex> payment_one = Monetized.Money.make(2000)\n    ...> payment_two = Monetized.Money.make(150.25)\n    ...> result = Monetized.Math.sub(payment_one, payment_two)\n    ...> Monetized.Money.to_string(result, [show_currency: true])\n    \"$ 1,849.75\"\n    \n    iex> result = Monetized.Math.sub(100.50, 200)\n    ...> Monetized.Money.to_string(result, [show_currency: true])\n    \"$ -99.50\"\n    \n","arity":2},{"type":"def","source":"lib/money.ex:197","signature":[["amount",[],null],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"from_float","module_id":"Monetized.Money","id":"from_float/2","doc":"\nCreates a money struct from a float value.\n\nIt uses the default currency (\"USD\") if one isn't\nconfigured.\n\nPassing currency in the options will make it use that\ndespite of configured or default.\n\nThis function exists for convenience and despite it taking\na float value, the internal calculations are done on \nintegers (basic units)\n\n\n## Examples\n\n    iex> Monetized.Money.from_float(100.00, [currency: \"EUR\"])\n    %Monetized.Money{currency: \"EUR\", units: 10000}\n\n    iex> Monetized.Money.from_float(150.52)\n    %Monetized.Money{currency: \"USD\", units: 15052}\n    \n    iex> Monetized.Money.from_float(20.50)\n    %Monetized.Money{currency: \"USD\", units: 2050}\n    \n","arity":2},{"type":"def","source":"lib/money.ex:171","signature":[["amount",[],null],["options",[],null]],"object_type":"FunctionObject","name":"from_integer","module_id":"Monetized.Money","id":"from_integer/2","doc":"\nCreates a money struct from a integer value.\n\nIt uses the default currency (\"USD\") if one isn't\nconfigured.\n\nPassing currency in the options will make it use that\ndespite of configured or default.\n\n## Examples\n\n    iex> Monetized.Money.from_integer(152, [currency: \"GBP\"])\n    %Monetized.Money{currency: \"GBP\", units: 15200}\n    \n    iex> Monetized.Money.from_integer(152, [currency: \"GBP\"])\n    %Monetized.Money{currency: \"GBP\", units: 15200}\n    \n","arity":2},{"type":"def","source":"lib/money.ex:135","signature":[["amount",[],null],["options",[],null]],"object_type":"FunctionObject","name":"from_string","module_id":"Monetized.Money","id":"from_string/2","doc":"\nCreates a money struct from a string value.\n\nIt uses the default currency (\"USD\") if one isn't\nconfigured.\n\nPassing currency in the options will make it use that\ndespite of configured or default.\n\n## Examples\n\n    iex> Monetized.Money.from_string(\"10.52\", [currency: \"GBP\"])\n    %Monetized.Money{currency: \"GBP\", units: 1052}\n    \n    iex> Monetized.Money.from_string(\"100\", [currency: \"EUR\"])\n    %Monetized.Money{currency: \"EUR\", units: 10000}\n    \n","arity":2},{"type":"def","source":"lib/money.ex:86","signature":[["amount",[],null],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"make","module_id":"Monetized.Money","id":"make/2","doc":"\nCreates a money struct from any of the supported\ntypes for amount.\n\nIt uses the default currency (\"USD\") if one isn't\nconfigured.\n\nPassing `currency` in the options will make it use that\ndespite of configured or default.\n\nThis function exists for convenience and despite it taking\na float value, the internal calculations are done on \nintegers (basic units)\n\n## Examples\n\n    iex> Monetized.Money.make(\"20150.25\", [currency: \"GBP\"])\n    %Monetized.Money{currency: \"GBP\", units: 2015025}\n    \n    iex> Monetized.Money.make(20150.25, [currency: \"EUR\"])\n    %Monetized.Money{currency: \"EUR\", units: 2015025}\n    \n    iex> Monetized.Money.make(20150)\n    %Monetized.Money{currency: \"USD\", units: 2015000}\n\n    iex> Monetized.Money.make(-100.50)\n    %Monetized.Money{currency: \"USD\", units: -10050}  \n    \n","arity":2},{"type":"def","source":"lib/money.ex:35","signature":[["money",[],null],["\\\\",[],[["options",[],null],[]]]],"object_type":"FunctionObject","name":"to_string","module_id":"Monetized.Money","id":"to_string/2","doc":"\nReturns a string representation of the given money\n\n## Examples\n\n    iex> money = Monetized.Money.make(\"20150.25\", [currency: \"GBP\"])\n    ...> Monetized.Money.to_string(money, [show_currency: true])\n    \"£ 20,150.25\"\n    \n    iex> money = Monetized.Money.make(999999999)\n    ...> Monetized.Money.to_string(money, [delimiter: \" \", separator: \" \"])\n    \"999 999 999 00\"\n    \n    iex> money = Monetized.Money.make(100_000_000, [currency: \"USD\"])\n    ...> Monetized.Money.to_string(money, [format: \"%n%s%d %c\", show_currency: true])\n    \"100,000,000.00 $\"\n    \n    iex> money = Monetized.Money.make(-9950, [currency: \"USD\", units: true])\n    ...> Monetized.Money.to_string(money, [show_currency: true])\n    \"$ -99.50\"\n    \n","arity":2}],"language":"elixir","git_repo_url":"https://github.com/theocodes/monetized.git","client_version":"0.4.0","client_name":"inch_ex","branch_name":"master","args":[]}